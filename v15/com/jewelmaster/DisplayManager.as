package com.jewelmaster{	import com.terrypaton.events.GeneralEvents;	import com.terrypaton.events.ButtonEvent;	import com.terrypaton.events.HighscoreEvent;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.text.TextField;	import flash.display.MovieClip;	import flash.display.Sprite;	import com.terrypaton.utils.Stats;	import com.terrypaton.utils.Broadcaster;	import com.terrypaton.events.PlayingLoopEvent;	import flash.geom.ColorTransform;	import com.terrypaton.utils.SeededRandomNumber	import flash.geom.Matrix;	import flash.geom.Point;	import flash.geom.Rectangle;	import com.gs.*	import com.gs.easing.*	import com.terrypaton.media.SoundManager	//import com.atticmedia.console.*	import com.terrypaton.utils.SharedObjectManager	public class DisplayManager extends MovieClip {				public function DisplayManager ():void {			_instance = this;			sprite_GameHolder = new Sprite();			sprite_MenuHolder = new Sprite();			sprite_StatsSprite = new Sprite();			sprite_Transitions = new Sprite ();						addChild (sprite_GameHolder);			addChild (sprite_MenuHolder);			addChild (sprite_Transitions);			// stats sprite			addChild (sprite_StatsSprite);			//			sprite_StatsSprite.visible = false;			sprite_StatsSprite.addChild (new Stats ());			//			_DataManagerRef = DataManager.getInstance();			//_rootRef = TreasureCaves.getInstance();			//_EnemyClassRef = EnemyClass.getInstance();			//			setupListeners ();			setupGraphics ();			addChild(clip_medalUnlocked)			clip_medalUnlocked.x = 320			clip_medalUnlocked.y = -45			clip_medalUnlocked.visible = false			addChild (baseControls_clip)			baseControls_clip.x = 640			sprite_GameHolder.scrollRect = new Rectangle(0, 0, settings.SCREEN_WIDTH, settings.SCREEN_HEIGHT)		}		private function medalUnlocked(e:JewelMasterEvents):void {			//trace("medal unlocked")					var testMedal:int = e.data.medalUnlocked			trace("testing medal num: " + testMedal)						var medalsArray:Array = SharedObjectManager.getInstance ().getData ("medalsUnlocked")			if (medalsArray == null){				medalsArray = new Array(0,0,0,0,0,0,0,0,0,0,0,0)			}			if (medalsArray[testMedal]==0) {				clip_medalUnlocked.visible = true				clip_medalUnlocked.y = -45				TweenLite.to(clip_medalUnlocked,1,{y:83})				TweenLite.to(clip_medalUnlocked, 1, { y: -45, delay:3, overwrite:false, onComplete:hideMedalsPanel } )				medalsArray[testMedal] = 1				clip_medalUnlocked.textBox.text = MedalsScreenClass.getInstance().medalTextArray[testMedal]				clip_medalUnlocked.medalBadge.gotoAndStop(testMedal+2)			}			trace("set the medal array data - medalsArray:"+medalsArray)			SharedObjectManager.getInstance().setData("medalsUnlocked",medalsArray)		}		private function hideMedalsPanel():void {			clip_medalUnlocked.visible  = false		}		public static function getInstance ():DisplayManager {			return _instance;		}		public function displayLevelCompleteMsg (e:JewelMasterEvents):void {						sprite_MenuHolder.addChild ( levelCompleteMsg)			levelCompleteMsg.textBox.text = "LEVEL "+e.data.levelNum+"\nCOMPLETE"			levelCompleteMsg.x = 240			levelCompleteMsg.y = 240			levelCompleteMsg.alpha = 0			levelCompleteMsg.scaleY =levelCompleteMsg.scaleX = .1			TweenLite.to(levelCompleteMsg,.75,{scaleX:1,scaleY:1,alpha:1,ease:Back.easeOut})		}		public function goGame (e:PlayingLoopEvent):void {									Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.SHOW_HOME_BTN))			// //C.ch("display manager","go game")			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_SCREEN_TRANSITION))			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_SCREENS))			sprite_GameHolder.addChild (gamePlay_clip)						gamePlay_clip.initGameplay ()			stage.focus = gamePlay_clip			//			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.REVEAL_GAME_HUD))							}		private function hideGame():void {			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_HUD))			try {				//sprite_GameHolder.removeChild (gameBitmap);				}catch(e:Error){}			//sprite_GameHolder.removeChild (gameBitmap);			//sprite_GameHolder.removeChild (HUD_clip);		}		public function removeTheMovieClip(e:GeneralEvents):void {			try {				var _clip:MovieClip = e.data.clip				_clip.parent.removeChild(_clip)				}			catch (e:Error) {							}							}		public function goMainMenu (e:PlayingLoopEvent):void {			// show the main menu panel			SoundManager.playSound("introSound.wav")			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.EVAL_SOUND))			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_HOME_BTN))						// //C.ch("display manager","show main menu")						//Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_SCREEN_TRANSITION))					Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_SCREENS))			//Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_SCREEN_TRANSITION))			sprite_MenuHolder.addChild (MainMenu_clip);			MainMenu_clip.restart()			MainMenu_clip.gotoAndPlay("in")		}		private function goNextLevel(e:PlayingLoopEvent):void {			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.SHOW_HOME_BTN))			levelComplete_clip.gotoAndPlay("out")			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.REVEAL_GAME_HUD))					}		public function goLevelComplete (e:PlayingLoopEvent):void {			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.SHOW_HOME_BTN))			trace ("tell the hud to be put away")			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_HUD))			sprite_GameHolder.addChild (levelComplete_clip);			levelComplete_clip.gotoAndPlay("in")		}		public function goGameComplete (e:PlayingLoopEvent):void {			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.SHOW_HOME_BTN))			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_HUD))			if (gameComplete_clip == null) {				gameComplete_clip = new gameCompleteClip()			}						SoundManager.playSound("gameComplete.wav")			sprite_MenuHolder.addChild (gameComplete_clip);			gameComplete_clip.gotoAndPlay ("in")			gameComplete_clip.restart()		}		public function goMedals (e:PlayingLoopEvent):void {			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.SHOW_HOME_BTN))			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_SCREENS))			sprite_MenuHolder.addChild (medalsScreen_clip);			medalsScreen_clip.gotoAndPlay("in")		}				public function goLevelChooser (e:PlayingLoopEvent):void {			Broadcaster.dispatchEvent (new GeneralEvents (GeneralEvents.SHOW_HOME_BTN))						Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_SCREENS))			sprite_MenuHolder.addChild (levelChooserScreen_clip);			//levelChooserScreen_clip.gotoAndPlay("in")		}		public function goHighscoreScreen (e:PlayingLoopEvent):void {			// //C.ch ("display manager", "goHighscoreScreen")			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.SHOW_HOME_BTN))			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_SCREENS))						sprite_MenuHolder.addChild (highscoreScreen_clip);			highscoreScreen_clip.gotoAndPlay ("in")			Broadcaster.dispatchEvent(new HighscoreEvent(HighscoreEvent.SHOW_HIGH_SCORES))					}				public function goHelpScreen (e:PlayingLoopEvent):void {						// //C.ch("display manager","show help screen")			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.SHOW_HOME_BTN))			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_SCREENS))			sprite_MenuHolder.addChild (howToPlay_clip);			howToPlay_clip.gotoAndPlay("in")			//howToPlay_clip.			//Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.))		}									public function goGameOverScreen (e:PlayingLoopEvent):void {			//gameBitmapData.fillRect (gameBitmapData.rect, 0x00000000)			////trace("go game over")			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.SHOW_HOME_BTN))			Broadcaster.dispatchEvent(new GeneralEvents(GeneralEvents.HIDE_SCREENS))			sprite_MenuHolder.addChild (gameOver_clip);			gameOver_clip.gotoAndPlay ("in")			SoundManager.playSound("gameOver.wav")		}					public function renderGame (e:PlayingLoopEvent):void {						renderMatrix.identity ();			//gamebackground_clip.gotoAndStop(framesArray[(segment+1)])			gameBitmapData.draw (gamebackground_clip, renderMatrix);						//var _ref:PlayingLoopManager = PlayingLoopManager.getInstance()			var _ref:DataManager = DataManager.getInstance()			renderMatrix.identity ();							}		public function updateLives(e:GeneralEvents):void {							}									private var _tempPoint:Point = new Point()				public function toggleStats (e:PlayingLoopEvent) {			sprite_StatsSprite.visible = ! sprite_StatsSprite.visible;		}		private function setupGraphics () {			MainMenu_clip = new mainMenuScreen()			howToPlay_clip = new helpScreen()			highscoreScreen_clip = new highscoreScreen()			levelChooserScreen_clip = new levelChooserScreen()			medalsScreen_clip = new medalsScreen ()			gameOver_clip = new gameOverClip ()			levelCompleteMsg = new levelCompleteMsgClip()			gamePlay_clip = new gamePlayClip()			baseControls_clip = new baseControls ()						clip_medalUnlocked = new medalUnlockedClip()		}		private var clip_medalUnlocked:MovieClip		private function hideScreens (e:GeneralEvents):void {			// put all screens away						try {				sprite_MenuHolder.removeChild (levelCompleteMsg);			}catch (e:Error) {			}			try {				sprite_MenuHolder.removeChild (MainMenu_clip);			}catch (e:Error) {			}			try {				sprite_MenuHolder.removeChild (levelChooserScreen_clip);			}catch (e:Error) {			}			try {				sprite_MenuHolder.removeChild (highscoreScreen_clip);			}catch (e:Error) {							}			try {				sprite_MenuHolder.removeChild (medalsScreen_clip);			}catch (e:Error) {							}			try {				sprite_MenuHolder.removeChild (gameOver_clip);			}catch (e:Error) {							}				try {				sprite_MenuHolder.removeChild (howToPlay_clip);			}catch (e:Error) {							}			try {				sprite_GameHolder.removeChild (gamePlay_clip);			}catch (e:Error) {							}			try {				sprite_MenuHolder.removeChild (gameComplete_clip);			}catch (e:Error) {							}					}				private function setupListeners () {			// //C.ch("display manager", "setupListeners()");			Broadcaster.addEventListener (PlayingLoopEvent.TOGGLE_STATS, toggleStats);			Broadcaster.addEventListener (PlayingLoopEvent.RENDER_SCREEN, renderGame);			Broadcaster.addEventListener (PlayingLoopEvent.GO_GAME_SCREEN, goGame);			Broadcaster.addEventListener (PlayingLoopEvent.GO_HELP_SCREEN, goHelpScreen);			Broadcaster.addEventListener (PlayingLoopEvent.GO_HIGHSCORES, goHighscoreScreen);			Broadcaster.addEventListener (PlayingLoopEvent.GO_MAIN_MENU, goMainMenu);			Broadcaster.addEventListener (PlayingLoopEvent.DISPLAY_LEVEL_COMPLETE, goLevelComplete);			Broadcaster.addEventListener (PlayingLoopEvent.DISPLAY_GAME_COMPLETE, goGameComplete);			Broadcaster.addEventListener(GeneralEvents.UPDATE_LIVES, updateLives)			Broadcaster.addEventListener (PlayingLoopEvent.GO_GAME_OVER, goGameOverScreen);			Broadcaster.addEventListener (GeneralEvents.QUIT_GAME, displayQuitGameConfirmation);			Broadcaster.addEventListener (GeneralEvents.CANCEL_QUIT_GAME, hideQuitGameConfirmation);			Broadcaster.addEventListener (GeneralEvents.CONFIRM_QUIT_GAME, hideQuitGameConfirmation);			Broadcaster.addEventListener (PlayingLoopEvent.GO_NEXT_LEVEL, goNextLevel);			Broadcaster.addEventListener (GeneralEvents.REMOVE_MOVIECLIP, removeTheMovieClip);						Broadcaster.addEventListener (GeneralEvents.HIDE_SCREENS, hideScreens);			Broadcaster.addEventListener (PlayingLoopEvent.SHOW_LEVEL_CHOOSER, goLevelChooser);			Broadcaster.addEventListener (PlayingLoopEvent.GO_MEDALS, goMedals);			Broadcaster.addEventListener (HighscoreEvent.CLOSE_HIGHSCORES, goMainMenu);			Broadcaster.addEventListener (JewelMasterEvents.SHOW_LEVEL_COMPLETE_MESSAGE, displayLevelCompleteMsg);			Broadcaster.addEventListener (PlayingLoopEvent.GO_GAME_COMPLETE, goGameComplete);			Broadcaster.addEventListener (JewelMasterEvents.MEDAL_UNLOCKED, medalUnlocked);																}						private function displayQuitGameConfirmation(e:GeneralEvents):void {			sprite_MenuHolder.addChild(confirmQuit_clip)			confirmQuit_clip.x = 450			confirmQuit_clip.y = -100			TweenMax.to(confirmQuit_clip,1,{y:200,ease:Cubic.easeOut})		}		private function removeMovie(_clip:MovieClip):void {			_clip.parent.removeChild(_clip)		}		private function hideQuitGameConfirmation(e:GeneralEvents):void {			TweenMax.to(confirmQuit_clip,.6,{y:-200,ease:Quint.easeIn,onComplete:removeMovie,onCompleteParams:[confirmQuit_clip]})		}		public var sprite_StatsSprite:Sprite;		private var sprite_GameHolder:Sprite;		private var sprite_MenuHolder:Sprite;		private var sprite_Transitions:Sprite;		private var gamebackground_clip:MovieClip;		private var screenTransition_clip:MovieClip;				private var player_clip:MovieClip;		private var gameBitmapData:BitmapData;		private var gameBitmap:Bitmap;		private var renderMatrix:Matrix = new Matrix();		private var _DataManagerRef:DataManager;		private static  var _instance:DisplayManager;			private var _playerLoc:Point;		//private var _rootRef:JewelMaster;							private var levelCompleteMsg:MovieClip;		private var gamePlay_clip:MovieClip;		private var levelComplete_clip:MovieClip;		private var gameComplete_clip:MovieClip;		private var gameOver_clip:MovieClip;		private var download_clip:MovieClip;		private var howToPlay_clip:MovieClip;		private var highscoreScreen_clip:MovieClip;		private var MainMenu_clip:MovieClip;		private var confirmQuit_clip:MovieClip;		private var HUD_clip:MovieClip;		private var levelChooserScreen_clip:MovieClip;		private var medalsScreen_clip:MovieClip;		private var baseControls_clip:MovieClip;				}}